<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Task</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body { font-family: 'Inter', sans-serif; }
    .alert { display: none; }
    .alert.show { display: block; }
    button { transition: background-color 0.2s ease, transform 0.2s ease; }
    button:hover { transform: scale(1.05); }
  </style>
  <link rel="shortcut icon" href="/images/icon.png" type="image/x-icon">
</head>
<body class="bg-gradient-to-br from-gray-800 to-gray-900 min-h-screen flex items-center justify-center">
  <div class="container mx-auto p-6">
    <div class="bg-slate-800 p-6 rounded-xl max-w-md w-full space-y-4">
      <h2 class="text-xl font-bold text-white">Edit Task</h2>
      <div id="edit-alert-message" class="alert bg-red-500 text-white p-3 rounded-lg text-sm"></div>
      <form id="edit-form" class="space-y-4" onsubmit="return validateEditForm(event)">
        <input type="hidden" name="originalTitle" value="<%= task.title %>">
        <input id="task-title" name="title" class="block w-full px-4 py-3 rounded-lg bg-slate-700 border border-slate-600 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500" type="text" value="<%= task.title %>" placeholder="Task Title">
        <input id="task-email" name="email" class="block w-full px-4 py-3 rounded-lg bg-slate-700 border border-slate-600 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500" type="email" value="<%= task.email %>" placeholder="Email for Reminder">
        <input id="task-due-date" name="dueDate" class="block w-full px-4 py-3 rounded-lg bg-slate-700 border border-slate-600 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500" type="datetime-local" value="<%= task.dueDate.slice(0, 16) %>" min="<%= new Date().toISOString().slice(0, 16) %>">
        <textarea name="details" class="block w-full px-4 py-3 rounded-lg bg-slate-700 border border-slate-600 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none" rows="4" placeholder="Task Details"><%= task.details %></textarea>
        <div class="flex justify-end space-x-2">
          <button type="submit" class="bg-blue-600 hover:bg-blue-700 px-6 py-3 rounded-lg font-semibold text-white">Save Changes</button>
          <a href="/?view=<%= new URLSearchParams(request.query).get('view') || 'list' %>" class="bg-slate-600 hover:bg-slate-700 px-6 py-3 rounded-lg font-semibold text-white">Cancel</a>
        </div>
      </form>
    </div>
  </div>

  <script>
    async function validateEditForm(event) {
      event.preventDefault();
      const title = document.getElementById('task-title').value;
      const email = document.getElementById('task-email').value;
      const dueDate = document.getElementById('task-due-date').value;
      const details = document.querySelector('textarea[name="details"]').value;
      const originalTitle = document.querySelector('input[name="originalTitle"]').value;
      const alertMessage = document.getElementById('edit-alert-message');
      const invalidChars = /[^a-zA-Z0-9\s]/;
      const emailRegex = /\S+@\S+\.\S+/;
      const view = new URLSearchParams(window.location.search).get('view') || 'list';

      alertMessage.classList.remove('show');
      alertMessage.textContent = '';

      if (!title.trim()) {
        alertMessage.textContent = 'Task title cannot be empty';
        alertMessage.classList.add('show');
        return false;
      }
      if (invalidChars.test(title)) {
        alertMessage.textContent = 'Task title can only contain letters, numbers, and spaces';
        alertMessage.classList.add('show');
        return false;
      }
      if (!email || !emailRegex.test(email)) {
        alertMessage.textContent = 'Please enter a valid email address';
        alertMessage.classList.add('show');
        return false;
      }
      if (!dueDate) {
        alertMessage.textContent = 'Please select a due date and time';
        alertMessage.classList.add('show');
        return false;
      }

      try {
        if (title !== originalTitle) {
          let response = await fetch('/check-title', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title })
          });
          let data = await response.json();
          if (!response.ok) {
            alertMessage.textContent = data.error || 'Error checking title availability';
            alertMessage.classList.add('show');
            return false;
          }
          if (data.exists) {
            alertMessage.textContent = 'Task title already exists. Please choose a different title.';
            alertMessage.classList.add('show');
            return false;
          }
        }

        let response = await fetch('/edit/<%= encodeURIComponent(task.title) %>', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams({ title, email, dueDate, details })
        });
        if (!response.ok) {
          const data = await response.json();
          alertMessage.textContent = data.error || 'Error updating task';
          alertMessage.classList.add('show');
          return false;
        }
        window.location.href = `/?view=${view}`;
        return true;
      } catch (err) {
        console.error('Error updating task:', err);
        alertMessage.textContent = 'Error updating task: ' + err.message;
        alertMessage.classList.add('show');
        return false;
      }
    }
  </script>
</body>
</html>